name: CI
on:
  push:
  schedule:
    - cron: '0 3 * * SUN'
  # tags:
  #   - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu]
        jvm_version: [8]
        # os: [windows, macos, ubuntu]
        # jvm_version: [8, 11, 14]
    runs-on: ${{ matrix.os }}-latest
    env:
      OS: ${{ matrix.os }}
      TERM: dumb
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.jvm_version }}
      - name: Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew --info
        env:
          CI: true
  # release:
  #   needs: build
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  release:
    needs: build
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          chmod +x ./gradlew 
          ./gradlew shadowJar
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/libs/
          asset_name: ${{ github.repository }}-all.jar
          asset_content_type: application/zip
